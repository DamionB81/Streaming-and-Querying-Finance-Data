{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;}
{\colortbl;\red255\green255\blue255;\red157\green0\blue210;\red255\green255\blue255;\red45\green45\blue45;
\red144\green1\blue18;\red0\green0\blue255;\red101\green76\blue29;\red0\green0\blue109;\red0\green0\blue0;
\red19\green118\blue70;\red230\green0\blue6;}
{\*\expandedcolortbl;;\cssrgb\c68627\c0\c85882;\cssrgb\c100000\c100000\c100000;\cssrgb\c23137\c23137\c23137;
\cssrgb\c63922\c8235\c8235;\cssrgb\c0\c0\c100000;\cssrgb\c47451\c36863\c14902;\cssrgb\c0\c6275\c50196;\cssrgb\c0\c0\c0;
\cssrgb\c3529\c52549\c34510;\cssrgb\c93333\c0\c0;}
\margl1440\margr1440\vieww23160\viewh14000\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\fs24 \cf2 \cb3 \expnd0\expndtw0\kerning0
\outl0\strokewidth0 \strokec2 import\cf4 \strokec4  json\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  boto3\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  datetime\cb1 \
\cf2 \cb3 \strokec2 from\cf4 \strokec4  time \cf2 \strokec2 import\cf4 \strokec4  sleep\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  subprocess\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  sys\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  os\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf4 \cb3 subprocess.check_call([sys.executable, \cf5 \strokec5 "-m"\cf4 \strokec4 , \cf5 \strokec5 "pip"\cf4 \strokec4 , \cf5 \strokec5 "install"\cf4 \strokec4 , \cf5 \strokec5 "--target"\cf4 \strokec4 , \cf5 \strokec5 "/tmp"\cf4 \strokec4 , \cf5 \strokec5 "yfinance"\cf4 \strokec4 ])\cb1 \
\cb3 subprocess.check_call([sys.executable, \cf5 \strokec5 "-m"\cf4 \strokec4 , \cf5 \strokec5 "pip"\cf4 \strokec4 , \cf5 \strokec5 "install"\cf4 \strokec4 , \cf5 \strokec5 "--target"\cf4 \strokec4 , \cf5 \strokec5 "/tmp"\cf4 \strokec4 , \cf5 \strokec5 "pytz"\cf4 \strokec4 ])\cb1 \
\cb3 sys.path.append(\cf5 \strokec5 '/tmp'\cf4 \strokec4 )\cb1 \
\
\pard\pardeftab720\partightenfactor0
\cf2 \cb3 \strokec2 import\cf4 \strokec4  yfinance \cf2 \strokec2 as\cf4 \strokec4  yf\cb1 \
\cf2 \cb3 \strokec2 import\cf4 \strokec4  pytz\cb1 \
\
\
\pard\pardeftab720\partightenfactor0
\cf6 \cb3 \strokec6 def\cf4 \strokec4  \cf7 \strokec7 lambda_handler\cf4 \strokec4 (\cf8 \strokec8 event\cf4 \strokec4 , \cf8 \strokec8 context\cf4 \strokec4 ):\cb1 \
\pard\pardeftab720\partightenfactor0
\cf4 \cb3     kinesis \strokec9 =\strokec4  boto3.client(\cf5 \strokec5 'kinesis'\cf4 \strokec4 , \cf8 \strokec8 region_name\cf4 \strokec9 =\cf5 \strokec5 "us-east-2"\cf4 \strokec4 )\cb1 \
\cb3     \cb1 \
\cb3     tickers \strokec9 =\strokec4  [\cf5 \strokec5 "AMZN"\cf4 \strokec4 , \cf5 \strokec5 "BABA"\cf4 \strokec4 , \cf5 \strokec5 "MSFT"\cf4 \strokec4 , \cf5 \strokec5 "AAPL"\cf4 \strokec4 , \cf5 \strokec5 "GOOG"\cf4 \strokec4 , \cf5 \strokec5 "TSLA"\cf4 \strokec4 , \cf5 \strokec5 "NVDA"\cf4 \strokec4 , \cf5 \strokec5 "IBM"\cf4 \strokec4 , \cf5 \strokec5 "SAP"\cf4 \strokec4 , \cf5 \strokec5 "CSCO"\cf4 \strokec4 ]\cb1 \
\
\cb3     valid_dates \strokec9 =\strokec4  \{\cb1 \
\cb3         datetime.date(\cf10 \strokec10 2025\cf4 \strokec4 , \cf10 \strokec10 4\cf4 \strokec4 , \cf10 \strokec10 14\cf4 \strokec4 ), datetime.date(\cf10 \strokec10 2025\cf4 \strokec4 , \cf10 \strokec10 4\cf4 \strokec4 , \cf10 \strokec10 15\cf4 \strokec4 ), datetime.date(\cf10 \strokec10 2025\cf4 \strokec4 , \cf10 \strokec10 4\cf4 \strokec4 , \cf10 \strokec10 16\cf4 \strokec4 ),\cb1 \
\cb3         datetime.date(\cf10 \strokec10 2025\cf4 \strokec4 , \cf10 \strokec10 4\cf4 \strokec4 , \cf10 \strokec10 17\cf4 \strokec4 ), datetime.date(\cf10 \strokec10 2025\cf4 \strokec4 , \cf10 \strokec10 4\cf4 \strokec4 , \cf10 \strokec10 21\cf4 \strokec4 ), datetime.date(\cf10 \strokec10 2025\cf4 \strokec4 , \cf10 \strokec10 4\cf4 \strokec4 , \cf10 \strokec10 22\cf4 \strokec4 ),\cb1 \
\cb3         datetime.date(\cf10 \strokec10 2025\cf4 \strokec4 , \cf10 \strokec10 4\cf4 \strokec4 , \cf10 \strokec10 23\cf4 \strokec4 ), datetime.date(\cf10 \strokec10 2025\cf4 \strokec4 , \cf10 \strokec10 4\cf4 \strokec4 , \cf10 \strokec10 24\cf4 \strokec4 ), datetime.date(\cf10 \strokec10 2025\cf4 \strokec4 , \cf10 \strokec10 4\cf4 \strokec4 , \cf10 \strokec10 25\cf4 \strokec4 )\cb1 \
\cb3     \}\cb1 \
\
\cb3     start_str \strokec9 =\strokec4  \cf5 \strokec5 "2025-04-14"\cf4 \cb1 \strokec4 \
\cb3     end_str \strokec9 =\strokec4  \cf5 \strokec5 "2025-04-26"\cf4 \cb1 \strokec4 \
\
\cb3     \cb1 \
\cb3     eastern \strokec9 =\strokec4  pytz.timezone(\cf5 \strokec5 "US/Eastern"\cf4 \strokec4 )\cb1 \
\cb3     market_open \strokec9 =\strokec4  datetime.time(\cf10 \strokec10 9\cf4 \strokec4 , \cf10 \strokec10 30\cf4 \strokec4 )\cb1 \
\cb3     market_close \strokec9 =\strokec4  datetime.time(\cf10 \strokec10 16\cf4 \strokec4 , \cf10 \strokec10 0\cf4 \strokec4 )\cb1 \
\
\cb3     \cf2 \strokec2 for\cf4 \strokec4  ticker \cf2 \strokec2 in\cf4 \strokec4  tickers:\cb1 \
\cb3         stock \strokec9 =\strokec4  yf.Ticker(ticker)\cb1 \
\cb3         hist \strokec9 =\strokec4  stock.history(\cf8 \strokec8 start\cf4 \strokec9 =\strokec4 start_str, \cf8 \strokec8 end\cf4 \strokec9 =\strokec4 end_str, \cf8 \strokec8 interval\cf4 \strokec9 =\cf5 \strokec5 "5m"\cf4 \strokec4 , \cf8 \strokec8 prepost\cf4 \strokec9 =\cf6 \strokec6 False\cf4 \strokec4 )\cb1 \
\cb3         hist.reset_index(\cf8 \strokec8 inplace\cf4 \strokec9 =\cf6 \strokec6 True\cf4 \strokec4 )\cb1 \
\
\cb3         \cf2 \strokec2 for\cf4 \strokec4  _, row \cf2 \strokec2 in\cf4 \strokec4  hist.iterrows():\cb1 \
\cb3             dt \strokec9 =\strokec4  row[\cf5 \strokec5 "Datetime"\cf4 \strokec4 ]\cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  dt.tzinfo \cf6 \strokec6 is\cf4 \strokec4  \cf6 \strokec6 None\cf4 \strokec4 :\cb1 \
\cb3                 dt \strokec9 =\strokec4  eastern.localize(dt)\cb1 \
\cb3             \cf2 \strokec2 else\cf4 \strokec4 :\cb1 \
\cb3                 dt \strokec9 =\strokec4  dt.astimezone(eastern)\cb1 \
\
\cb3             row_date \strokec9 =\strokec4  dt.date()\cb1 \
\cb3             row_time \strokec9 =\strokec4  dt.time()\cb1 \
\
\cb3             \cb1 \
\cb3             \cf2 \strokec2 if\cf4 \strokec4  row_date \cf6 \strokec6 not\cf4 \strokec4  \cf6 \strokec6 in\cf4 \strokec4  valid_dates \cf6 \strokec6 or\cf4 \strokec4  \cf6 \strokec6 not\cf4 \strokec4  (market_open \strokec9 <=\strokec4  row_time \strokec9 <=\strokec4  market_close):\cb1 \
\cb3                 \cf2 \strokec2 continue\cf4 \cb1 \strokec4 \
\
\cb3             data_dict \strokec9 =\strokec4  \{\cb1 \
\cb3                 \cf5 \strokec5 "high"\cf4 \strokec4 : \cf7 \strokec7 round\cf4 \strokec4 (row[\cf5 \strokec5 "High"\cf4 \strokec4 ], \cf10 \strokec10 2\cf4 \strokec4 ),\cb1 \
\cb3                 \cf5 \strokec5 "low"\cf4 \strokec4 : \cf7 \strokec7 round\cf4 \strokec4 (row[\cf5 \strokec5 "Low"\cf4 \strokec4 ], \cf10 \strokec10 2\cf4 \strokec4 ),\cb1 \
\cb3                 \cf5 \strokec5 "volatility"\cf4 \strokec4 : \cf7 \strokec7 round\cf4 \strokec4 (row[\cf5 \strokec5 "High"\cf4 \strokec4 ] \strokec9 -\strokec4  row[\cf5 \strokec5 "Low"\cf4 \strokec4 ], \cf10 \strokec10 2\cf4 \strokec4 ),\cb1 \
\cb3                 \cf5 \strokec5 "ts"\cf4 \strokec4 : dt.strftime(\cf5 \strokec5 "%Y-%m-\cf6 \strokec6 %d\cf5 \strokec5  %H:%M:%S%z"\cf4 \strokec4 ),\cb1 \
\cb3                 \cf5 \strokec5 "name"\cf4 \strokec4 : ticker\cb1 \
\cb3             \}\cb1 \
\
\cb3             data \strokec9 =\strokec4  json.dumps(data_dict) \strokec9 +\strokec4  \cf5 \strokec5 "\cf11 \strokec11 \\n\cf5 \strokec5 "\cf4 \cb1 \strokec4 \
\
\cb3             kinesis.put_record(\cb1 \
\cb3                 \cf8 \strokec8 StreamName\cf4 \strokec9 =\cf5 \strokec5 "Streaming-Finance-Data"\cf4 \strokec4 ,\cb1 \
\cb3                 \cf8 \strokec8 Data\cf4 \strokec9 =\strokec4 data,\cb1 \
\cb3                 \cf8 \strokec8 PartitionKey\cf4 \strokec9 =\cf5 \strokec5 "partitionkey"\cf4 \cb1 \strokec4 \
\cb3             )\cb1 \
\
\cb3             \cf7 \strokec7 print\cf4 \strokec4 (data)\cb1 \
\cb3             sleep(\cf10 \strokec10 0.05\cf4 \strokec4 )\cb1 \
\
\cb3     \cf2 \strokec2 return\cf4 \strokec4  \{\cb1 \
\cb3         \cf5 \strokec5 'statusCode'\cf4 \strokec4 : \cf10 \strokec10 200\cf4 \strokec4 ,\cb1 \
\cb3         \cf5 \strokec5 'body'\cf4 \strokec4 : json.dumps(\cf5 \strokec5 'Hello from Lambda!'\cf4 \strokec4 )\cb1 \
\cb3     \}\cb1 \
\
}